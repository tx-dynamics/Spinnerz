import { useState, useCallback, useRef, useMemo } from 'react';
import { Dimensions } from 'react-native';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var flashModeOrder = {
    off: 'on',
    on: 'auto',
    auto: 'torch',
    torch: 'off',
};
var wbOrder = {
    auto: 'sunny',
    sunny: 'cloudy',
    cloudy: 'shadow',
    shadow: 'fluorescent',
    fluorescent: 'incandescent',
    incandescent: 'auto',
};

var useToggle = function (initialState, values) {
    if (initialState === void 0) { initialState = ''; }
    if (values === void 0) { values = []; }
    var _a = useState(initialState), state = _a[0], setState = _a[1];
    return [
        state,
        function () {
            return setState(!values
                ? function (_state) { return !_state; }
                : state === values[0]
                    ? values[1]
                    : values[0]);
        },
    ];
};
var useFlash = function (state) {
    if (state === void 0) { state = ''; }
    var _a = useState(state), flash = _a[0], setFlash = _a[1];
    var toggleFlash = function () {
        setFlash(flashModeOrder[flash]);
    };
    return [
        flash,
        {
            toggleFlash: toggleFlash,
            setFlash: setFlash,
        },
    ];
};
var useWhiteBalance = function (state) {
    if (state === void 0) { state = ''; }
    var _a = useState(state), whiteBalance = _a[0], setWhiteBalance = _a[1];
    var toggleWB = function () {
        Object.keys(wbOrder).indexOf(whiteBalance);
        setWhiteBalance(wbOrder[whiteBalance]);
    };
    return [
        whiteBalance,
        {
            toggleWB: toggleWB,
            setWhiteBalance: setWhiteBalance,
        },
    ];
};
var useAutoFocus = function (state, toggleModes) {
    if (state === void 0) { state = ''; }
    var _a = useToggle(state, toggleModes), autoFocus = _a[0], toggleAutoFocus = _a[1];
    return [autoFocus, toggleAutoFocus];
};
var useToggleFacing = function (state, toggleModes) {
    if (state === void 0) { state = ''; }
    var _a = useToggle(state, toggleModes), type = _a[0], toggleFacing = _a[1];
    return [type, toggleFacing];
};

var initialCameraState = {
    flash: 'on',
    zoom: 0,
    autoFocus: 'on',
    autoFocusPoint: {
        normalized: { x: 0.5, y: 0.5 },
        drawRectPosition: {
            x: Dimensions.get('window').width * 0.5 - 32,
            y: Dimensions.get('window').height * 0.5 - 32,
        },
    },
    focusDepth: 0,
    type: 'back',
    whiteBalance: 'auto',
    ratio: '16:9',
    isRecording: false,
    canDetectFaces: false,
    canDetectText: false,
    canDetectBarcode: false,
    faces: [],
    textBlocks: [],
    barcodes: [],
};

var useZoom = function (state) {
    if (state === void 0) { state = 0; }
    var _a = useState(state), zoom = _a[0], setZoom = _a[1];
    var zoomIn = function () {
        if (zoom + 0.01 <= 1 && zoom + 0.01 >= 0) {
            setZoom(zoom + 0.01);
        }
    };
    var zoomOut = function () {
        if (zoom - 0.1 <= 1 && zoom - 0.1 >= 0) {
            setZoom(zoom - 0.1);
        }
    };
    return [
        zoom,
        {
            setZoom: setZoom,
            zoomIn: zoomIn,
            zoomOut: zoomOut,
        },
    ];
};
var useCameraState = function (state) {
    if (state === void 0) { state = {}; }
    var _a = useState(state), cameraState = _a[0], setCameraState = _a[1];
    var toggleCameraState = function (newCameraState) {
        var _a;
        setCameraState((_a = {}, _a[newCameraState] = !cameraState[newCameraState], _a));
    };
    return [
        cameraState,
        {
            toggleCameraState: toggleCameraState,
            setCameraState: setCameraState,
        },
    ];
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var defaultPictureTakeOptions = {
    quality: 0.8,
    width: undefined,
    base64: false,
    doNotSave: false,
    exif: true,
    forceUpOrientation: true,
    fixOrientation: true,
    orientation: 'portrait',
};
var takePicture = function (_a, options) {
    var cameraRef = _a.cameraRef;
    if (options === void 0) { options = defaultPictureTakeOptions; }
    return __awaiter(void 0, void 0, Promise, function () {
        return __generator(this, function (_b) {
            if (cameraRef && cameraRef.takePictureAsync) {
                return [2 /*return*/, cameraRef.takePictureAsync(options)];
            }
            else if (cameraRef &&
                cameraRef.current &&
                cameraRef.current.takePictureAsync) {
                return [2 /*return*/, cameraRef.current.takePictureAsync(options)];
            }
            return [2 /*return*/];
        });
    });
};

var defaultVideoRecordOptions = {
    quality: '720p',
    orientation: 'auto',
    maxDuration: 5,
    mute: false,
    mirrorVideo: false,
    videoBitrate: 5000000,
};
var recordVideo = function (_a, options) {
    var cameraRef = _a.cameraRef;
    if (options === void 0) { options = defaultVideoRecordOptions; }
    return __awaiter(void 0, void 0, Promise, function () {
        return __generator(this, function (_b) {
            if (cameraRef && cameraRef.recordAsync) {
                return [2 /*return*/, cameraRef.recordAsync(options)];
            }
            else if (cameraRef && cameraRef.current && cameraRef.current.recordAsync) {
                return [2 /*return*/, cameraRef.current.recordAsync(options)];
            }
            return [2 /*return*/];
        });
    });
};

var stopRecording = function (_a) {
    var cameraRef = _a.cameraRef;
    return __awaiter(void 0, void 0, Promise, function () {
        return __generator(this, function (_b) {
            if (cameraRef && cameraRef.stopRecording) {
                return [2 /*return*/, cameraRef.stopRecording()];
            }
            else if (cameraRef &&
                cameraRef.current &&
                cameraRef.current.stopRecording) {
                return [2 /*return*/, cameraRef.current.stopRecording()];
            }
            return [2 /*return*/];
        });
    });
};

var pausePreview = function (_a) {
    var cameraRef = _a.cameraRef;
    return __awaiter(void 0, void 0, Promise, function () {
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(cameraRef && cameraRef.current && cameraRef.current.pausePreview)) return [3 /*break*/, 2];
                    return [4 /*yield*/, cameraRef.current.pausePreview()];
                case 1:
                    _b.sent();
                    return [2 /*return*/, true];
                case 2: return [2 /*return*/, false];
            }
        });
    });
};
var resumePreview = function (_a) {
    var cameraRef = _a.cameraRef;
    return __awaiter(void 0, void 0, Promise, function () {
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(cameraRef && cameraRef.current && cameraRef.current.resumePreview)) return [3 /*break*/, 2];
                    return [4 /*yield*/, cameraRef.current.resumePreview()];
                case 1:
                    _b.sent();
                    return [2 /*return*/, true];
                case 2: return [2 /*return*/, false];
            }
        });
    });
};

var useAutoFocusTouch = function (state) {
    if (state === void 0) { state = {}; }
    var _a = useState(state), autoFocusPoint = _a[0], setAutoFocusPoint = _a[1];
    var touchToFocus = useCallback(function (event) {
        var _a = event.nativeEvent, pageX = _a.pageX, pageY = _a.pageY;
        var screenWidth = Dimensions.get('window').width;
        var screenHeight = Dimensions.get('window').height;
        var isPortrait = screenHeight > screenWidth;
        var x = pageX / screenWidth;
        var y = pageY / screenHeight;
        // Coordinate transform for portrait. See autoFocusPointOfInterest in docs for more info
        if (isPortrait) {
            x = pageY / screenHeight;
            y = -(pageX / screenWidth) + 1;
        }
        setAutoFocusPoint({
            normalized: { x: x, y: y },
            drawRectPosition: { x: pageX, y: pageY },
        });
    }, []);
    return [
        autoFocusPoint,
        {
            touchToFocus: touchToFocus,
            setAutoFocusPoint: setAutoFocusPoint,
        },
    ];
};

var useTextRecognition = function (state) {
    if (state === void 0) { state = []; }
    var _a = useState(state), textBlocks = _a[0], setTextblocks = _a[1];
    var textRecognized = useCallback(function (data) {
        setTextblocks(data.textBlocks);
    }, []);
    return [textBlocks, { textRecognized: textRecognized }];
};

var useFaceDetection = function (state) {
    if (state === void 0) { state = []; }
    var _a = useState(state), faces = _a[0], setFaces = _a[1];
    var facesDetected = useCallback(function (data) {
        setFaces(data.faces);
    }, []);
    return [faces, { facesDetected: facesDetected }];
};

var useBarcodeDetection = function (state) {
    if (state === void 0) { state = []; }
    var _a = useState(state), barcodes = _a[0], setBarcodes = _a[1];
    var barcodeRecognized = useCallback(function (data) {
        setBarcodes(data.barcodes);
    }, [setBarcodes]);
    return [barcodes, { barcodeRecognized: barcodeRecognized }];
};

var useCamera = function useCamera(cameraOptions) {
  if (cameraOptions === void 0) {
    cameraOptions = initialCameraState;
  }

  var mergedCameraOptions = _extends({}, initialCameraState, cameraOptions);

  var cameraRef = useRef(null);

  var _useToggleFacing = useToggleFacing(mergedCameraOptions.type, ['front', 'back']),
      type = _useToggleFacing[0],
      toggleFacing = _useToggleFacing[1];

  var _useFlash = useFlash(mergedCameraOptions.flash),
      flash = _useFlash[0],
      _useFlash$ = _useFlash[1],
      setFlash = _useFlash$.setFlash,
      toggleFlash = _useFlash$.toggleFlash;

  var _useWhiteBalance = useWhiteBalance(mergedCameraOptions.whiteBalance),
      whiteBalance = _useWhiteBalance[0],
      _useWhiteBalance$ = _useWhiteBalance[1],
      setWhiteBalance = _useWhiteBalance$.setWhiteBalance,
      toggleWB = _useWhiteBalance$.toggleWB;

  var _useAutoFocus = useAutoFocus(mergedCameraOptions.autoFocus, ['on', 'off']),
      autoFocus = _useAutoFocus[0],
      toggleAutoFocus = _useAutoFocus[1];

  var _useAutoFocusTouch = useAutoFocusTouch(mergedCameraOptions.autoFocusPoint),
      autoFocusPoint = _useAutoFocusTouch[0],
      _useAutoFocusTouch$ = _useAutoFocusTouch[1],
      setAutoFocusPoint = _useAutoFocusTouch$.setAutoFocusPoint,
      touchToFocus = _useAutoFocusTouch$.touchToFocus;

  var _useState = useState(mergedCameraOptions.focusDepth),
      focusDepth = _useState[0],
      setFocusDepth = _useState[1];

  var _useCameraState = useCameraState({}),
      cameraState = _useCameraState[0],
      _useCameraState$ = _useCameraState[1],
      setCameraState = _useCameraState$.setCameraState,
      toggleCameraState = _useCameraState$.toggleCameraState;

  var _useTextRecognition = useTextRecognition([]),
      textBlocks = _useTextRecognition[0],
      textRecognized = _useTextRecognition[1].textRecognized;

  var _useFaceDetection = useFaceDetection([]),
      faces = _useFaceDetection[0],
      facesDetected = _useFaceDetection[1].facesDetected;

  var _useBarcodeDetection = useBarcodeDetection([]),
      barcodes = _useBarcodeDetection[0],
      barcodeRecognized = _useBarcodeDetection[1].barcodeRecognized;

  var _useState2 = useState(mergedCameraOptions.ratio),
      ratio = _useState2[0],
      setRatio = _useState2[1];

  var _useState3 = useState(false),
      isRecording = _useState3[0],
      setIsRecording = _useState3[1];

  var _useZoom = useZoom(mergedCameraOptions.zoom),
      zoom = _useZoom[0],
      _useZoom$ = _useZoom[1],
      setZoom = _useZoom$.setZoom,
      zoomIn = _useZoom$.zoomIn,
      zoomOut = _useZoom$.zoomOut;

  var drawFocusRingPosition = useMemo(function () {
    return {
      top: autoFocusPoint.drawRectPosition.y - 32,
      left: autoFocusPoint.drawRectPosition.x - 32
    };
  }, [autoFocusPoint]);
  return [{
    cameraRef: cameraRef,
    type: type,
    flash: flash,
    whiteBalance: whiteBalance,
    autoFocus: autoFocus,
    autoFocusPoint: autoFocusPoint,
    zoom: zoom,
    focusDepth: focusDepth,
    cameraState: cameraState,
    drawFocusRingPosition: drawFocusRingPosition,
    textBlocks: textBlocks,
    faces: faces,
    barcodes: barcodes,
    ratio: ratio,
    isRecording: isRecording
  }, {
    setFlash: setFlash,
    setWhiteBalance: setWhiteBalance,
    setZoom: setZoom,
    setCameraState: setCameraState,
    setAutoFocusPoint: setAutoFocusPoint,
    toggleFacing: toggleFacing,
    toggleFlash: toggleFlash,
    toggleWB: toggleWB,
    toggleAutoFocus: toggleAutoFocus,
    touchToFocus: touchToFocus,
    zoomIn: zoomIn,
    zoomOut: zoomOut,
    setFocusDepth: setFocusDepth,
    toggleCameraState: toggleCameraState,
    takePicture: function takePicture$1(options) {
      return takePicture({
        cameraRef: cameraRef
      }, options);
    },
    recordVideo: function recordVideo$1(options) {
      return recordVideo({
        cameraRef: cameraRef
      }, options);
    },
    stopRecording: function stopRecording$1() {
      return stopRecording({
        cameraRef: cameraRef
      });
    },
    pausePreview: pausePreview,
    isRecording: isRecording,
    resumePreview: resumePreview,
    setRatio: setRatio,
    setIsRecording: setIsRecording,
    barcodeRecognized: barcodeRecognized,
    textRecognized: textRecognized,
    facesDetected: facesDetected
  }];
};

export { initialCameraState, pausePreview, recordVideo, resumePreview, stopRecording, takePicture, useAutoFocus, useAutoFocusTouch, useBarcodeDetection, useCamera, useCameraState, useFaceDetection, useFlash, useTextRecognition, useToggleFacing, useWhiteBalance, useZoom };
//# sourceMappingURL=react-native-camera-hooks.js.map
