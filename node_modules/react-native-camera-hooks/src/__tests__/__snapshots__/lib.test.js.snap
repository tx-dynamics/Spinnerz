// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`React Native Camera Hooks renders default 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <Camera
    androidCameraPermissionOptions={null}
    androidRecordAudioPermissionOptions={null}
    autoFocus="on"
    autoFocusPointOfInterest={
      Object {
        "x": 0.5,
        "y": 0.5,
      }
    }
    barCodeTypes={Array []}
    cameraId={null}
    captureAudio={true}
    exposure={-1}
    faceDetectionClassifications={0}
    faceDetectionLandmarks={0}
    faceDetectionMode={1}
    flashMode={1}
    focusDepth={0}
    keepAudioSession={false}
    maxZoom={0}
    mirrorVideo={false}
    notAuthorizedView={
      <View
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
          }
        }
      >
        <Text
          style={
            Object {
              "fontSize": 16,
              "textAlign": "center",
            }
          }
        >
          Camera not authorized
        </Text>
      </View>
    }
    onFacesDetected={[Function]}
    onTextRecognized={[Function]}
    pendingAuthorizationView={
      <View
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
          }
        }
      >
        <ActivityIndicator
          animating={true}
          color="#999999"
          hidesWhenStopped={true}
          size="small"
        />
      </View>
    }
    permissionDialogMessage=""
    permissionDialogTitle=""
    pictureSize="None"
    playSoundOnCapture={false}
    ratio="16:9"
    style={
      Object {
        "flex": 1,
      }
    }
    type="back"
    useCamera2Api={false}
    useNativeZoom={false}
    videoStabilizationMode={0}
    zoom={0}
  />
  <TouchableWithoutFeedback
    onPress={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <ForwardRef
    onPress={[Function]}
    style={
      Object {
        "height": 45,
        "width": "100%",
      }
    }
    testID="button"
  >
    back
  </ForwardRef>
  <ForwardRef
    onPress={[Function]}
    style={
      Object {
        "height": 45,
        "width": "100%",
      }
    }
    testID="button"
  />
</View>
`;

exports[`React Native Camera Hooks renders with flipped side and simple regex checks 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <Camera
    androidCameraPermissionOptions={null}
    androidRecordAudioPermissionOptions={null}
    autoFocus="on"
    autoFocusPointOfInterest={
      Object {
        "x": 0.5,
        "y": 0.5,
      }
    }
    barCodeTypes={Array []}
    cameraId={null}
    captureAudio={true}
    exposure={-1}
    faceDetectionClassifications={0}
    faceDetectionLandmarks={0}
    faceDetectionMode={1}
    flashMode={1}
    focusDepth={0}
    keepAudioSession={false}
    maxZoom={0}
    mirrorVideo={false}
    notAuthorizedView={
      <View
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
          }
        }
      >
        <Text
          style={
            Object {
              "fontSize": 16,
              "textAlign": "center",
            }
          }
        >
          Camera not authorized
        </Text>
      </View>
    }
    onFacesDetected={[Function]}
    onTextRecognized={[Function]}
    pendingAuthorizationView={
      <View
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
          }
        }
      >
        <ActivityIndicator
          animating={true}
          color="#999999"
          hidesWhenStopped={true}
          size="small"
        />
      </View>
    }
    permissionDialogMessage=""
    permissionDialogTitle=""
    pictureSize="None"
    playSoundOnCapture={false}
    ratio="16:9"
    style={
      Object {
        "flex": 1,
      }
    }
    type="front"
    useCamera2Api={false}
    useNativeZoom={false}
    videoStabilizationMode={0}
    zoom={0}
  />
  <TouchableWithoutFeedback
    onPress={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <ForwardRef
    onPress={[Function]}
    style={
      Object {
        "height": 45,
        "width": "100%",
      }
    }
    testID="button"
  >
    front
  </ForwardRef>
  <ForwardRef
    onPress={[Function]}
    style={
      Object {
        "height": 45,
        "width": "100%",
      }
    }
    testID="button"
  />
</View>
`;
